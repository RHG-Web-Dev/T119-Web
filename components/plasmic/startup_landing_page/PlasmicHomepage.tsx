// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wWdqNpczajVbVmMegT1Kwd
// Component: eAXq8VyGpiR8W
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantskRsw4Y2RZfx5 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: -KRsw4Y2rZFX5/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_startup_landing_page.module.css"; // plasmic-import: wWdqNpczajVbVmMegT1Kwd/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: eAXq8VyGpiR8W/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: VR9-2NrD3Ty_z/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: XMTg7EaT2B28P/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: a5zZcEmTIA9WZ/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: NniXgKc7NxWf_/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  headerSliderSection?: p.Flex<"div">;
  button?: p.Flex<"button">;
  h1?: p.Flex<"h1">;
  art?: p.Flex<"div">;
  background2?: p.Flex<"div">;
  copy?: p.Flex<"div">;
  copy2?: p.Flex<"div">;
  art2?: p.Flex<"div">;
  copy3?: p.Flex<"div">;
  art3?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantskRsw4Y2RZfx5()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div
            data-plasmic-name={"headerSliderSection"}
            data-plasmic-override={overrides.headerSliderSection}
            className={classNames(projectcss.all, sty.headerSliderSection)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__sGuic)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sy31)}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__ez5FC)}
                  displayHeight={"default" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"76px" as const}
                  src={{
                    src: "/plasmic/startup_landing_page/images/logo1Svg.svg",
                    fullWidth: 150,
                    fullHeight: 150,
                    aspectRatio: 1
                  }}
                />

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wRnbn)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__nGvDd
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__wubhl)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fMqmz
                      )}
                    >
                      {"Tour"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__zIoB7)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__xjd50
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__pzqrz)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oftBw
                      )}
                    >
                      {"Pricing"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__jVm6Q)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__haNr
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__s8DpE)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sU5K
                      )}
                    >
                      {"Company"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__pB66G)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__c7TTn
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__jaOyd)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3FDuB
                      )}
                    >
                      {"Contact"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__lzzNi)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___3HxYa
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__kBhLi)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xfyvy
                      )}
                    >
                      {"Sign up"}
                    </div>

                    {false ? (
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__npq7M)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ugl1G)}
                  >
                    <button
                      data-plasmic-name={"button"}
                      data-plasmic-override={overrides.button}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button
                      )}
                    >
                      {"Sign up"}
                    </button>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__rkei0
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__htZrq)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eHJ4
                        )}
                      >
                        {"Log in"}
                      </div>

                      {false ? (
                        <IconIcon
                          className={classNames(projectcss.all, sty.svg__xNydr)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__i5DHj)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {"Hero text for your startup's product."}
              </h1>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2EnrB
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "This is introduction text describing why people should use your product. Double-click anywhere on the text to edit it's contents."
                  : "Lorem Ipsum is simply dummy text of the \nprinting and typesetting industry. "}
              </div>

              {true ? (
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__cEyI2)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("auto" as const)
                      : ("454px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"81%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/startup_landing_page/images/virtualAssistancepng.png",
                    fullWidth: 2006,
                    fullHeight: 2006,
                    aspectRatio: undefined
                  }}
                />
              ) : null}
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__pNw5C)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__usmTu)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__hABY
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "This header tells people why\n they should use your product."
                  : "Lorem Ipsum is Simply dummy text of\n the printing and typesetting industry"}
              </h2>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rxr1J
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "This is text giving an overview of the features section. Double-click anywhere on the text to edit it's contents."
                  : "Lorem Ipsum is Simply dummy text of the\n printing and typesetting industry"}
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mJjHw)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___8Lzur)}
                >
                  <div
                    data-plasmic-name={"art"}
                    data-plasmic-override={overrides.art}
                    className={classNames(projectcss.all, sty.art)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__bzdNu)}
                      displayHeight={"90%" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"90%" as const}
                      src={{
                        src: "/plasmic/startup_landing_page/images/rocketManRemovebgPreview1Png.png",
                        fullWidth: 530,
                        fullHeight: 471,
                        aspectRatio: undefined
                      }}
                    />

                    <div
                      data-plasmic-name={"background2"}
                      data-plasmic-override={overrides.background2}
                      className={classNames(projectcss.all, sty.background2)}
                    />
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__egsuW)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kk5Mx)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"copy"}
                        data-plasmic-override={overrides.copy}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.copy)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__kco2V
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3__fyB3Z
                            )}
                          >
                            {"Lorem Ipsum "}
                          </h3>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__kVdT0
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book"
                            }
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__yNor
                          )}
                        >
                          <p.Stack
                            as={p.PlasmicLink}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link___8Dq4B
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__c8QdI
                                )}
                                role={"img"}
                              />
                            ) : null}

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__yv4Ou
                              )}
                            >
                              {"Learn more"}
                            </div>

                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__vzfNx
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </div>
                </div>
              </p.Stack>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__oOpcw)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__fRXws)}
            >
              <div className={classNames(projectcss.all, sty.column__hOtao)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ty1Fz)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__q6VCr
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "This heading"
                      : "This heading"}
                  </h3>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ygQqq
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                    }
                  </div>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__coBrm)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/startup_landing_page/images/blastRemovebgPreviewpng.png",
                      fullWidth: 499,
                      fullHeight: 499,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column__kSwG)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__y8UzI)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__n7Vv
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "This heading"
                      : "This heading"}
                  </h3>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nEcwL
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                    }
                  </div>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___75DUg)}
                    displayHeight={"350px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/startup_landing_page/images/integrationsHeadersvg.svg",
                      fullWidth: 133,
                      fullHeight: 150,
                      aspectRatio: 0.885714
                    }}
                  />
                </p.Stack>
              </div>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__umyMp)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__j5OBd)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__vi1Zk)}>
                <div className={classNames(projectcss.all, sty.freeBox__lvJqm)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ptirK)}
                  >
                    <p.Stack
                      as={"div"}
                      data-plasmic-name={"copy2"}
                      data-plasmic-override={overrides.copy2}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.copy2)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wj2Sh
                        )}
                      >
                        <h3
                          className={classNames(
                            projectcss.all,
                            projectcss.h3,
                            projectcss.__wab_text,
                            sty.h3__hcH9Q
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "This is header about this product feature."
                            : "This is header about this product feature."}
                        </h3>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zSmyo
                          )}
                        >
                          {
                            "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book"
                          }
                        </div>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__c8XfS
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__gahKp
                          )}
                        >
                          <p.Stack
                            as={p.PlasmicLink}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              projectcss.a,
                              sty.link__dDbSi
                            )}
                            component={Link}
                            platform={"nextjs"}
                          >
                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___1HLqT
                                )}
                                role={"img"}
                              />
                            ) : null}

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4P1HN
                              )}
                            >
                              {"Learn more"}
                            </div>

                            {false ? (
                              <IconIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__rVbSy
                                )}
                                role={"img"}
                              />
                            ) : null}
                          </p.Stack>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </div>

                <div
                  data-plasmic-name={"art2"}
                  data-plasmic-override={overrides.art2}
                  className={classNames(projectcss.all, sty.art2)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__bicuN)}
                    displayHeight={"363px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    src={{
                      src: "/plasmic/startup_landing_page/images/foodDeliveryScooterPngPhotopng.png",
                      fullWidth: 777,
                      fullHeight: 687,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__tn4Gs)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns___6JRzt)}
            >
              <div className={classNames(projectcss.all, sty.column___2FUms)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__p1Ofx)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__o3EQ)}
                    displayHeight={"243px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/startup_landing_page/images/lightningRemovebgPreviewpng.png",
                      fullWidth: 562,
                      fullHeight: 444,
                      aspectRatio: undefined
                    }}
                  />

                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__yIgfS
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "This heading"
                      : "This heading"}
                  </h3>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sVuuO
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                    }
                  </div>
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column__qQdO8)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__j04Mb)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__kw2A
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "This is header about this other product feature."
                      : "This is header about this other product feature."}
                  </h3>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ov2Em
                    )}
                  >
                    {
                      "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                    }
                  </div>

                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__a5BLh)}
                    displayHeight={"248px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"auto" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/startup_landing_page/images/c519F38487C89Fadc75B13Ae907Ab12FRemovebgPreviewpng.png",
                      fullWidth: 577,
                      fullHeight: 433,
                      aspectRatio: undefined
                    }}
                  />
                </p.Stack>
              </div>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__tvda0)}>
            <div className={classNames(projectcss.all, sty.freeBox__vsu9X)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__wrrW3)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__ax94N)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___8XuRg)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__v2Qei)}
                    >
                      <p.Stack
                        as={"div"}
                        data-plasmic-name={"copy3"}
                        data-plasmic-override={overrides.copy3}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.copy3)}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uXyKd
                          )}
                        >
                          <h3
                            className={classNames(
                              projectcss.all,
                              projectcss.h3,
                              projectcss.__wab_text,
                              sty.h3___8N6Bq
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Trusted by thousands of companies"
                              : "Lorem Ipsum is simply dummy text"}
                          </h3>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__tzm5L
                            )}
                          >
                            {
                              "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "
                            }
                          </div>
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </div>

                  <div
                    data-plasmic-name={"art3"}
                    data-plasmic-override={overrides.art3}
                    className={classNames(projectcss.all, sty.art3)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__dgss6)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("220px" as const)
                          : ("399px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      src={{
                        src: "/plasmic/startup_landing_page/images/_11607942448Eynexrk8MlRemovebgPreviewpng.png",
                        fullWidth: 480,
                        fullHeight: 517,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
              </p.Stack>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__uhaQz)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__h2Xa)}
            >
              <h2
                className={classNames(
                  projectcss.all,
                  projectcss.h2,
                  projectcss.__wab_text,
                  sty.h2__bgae
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "This is a final call-to-\naction header"
                  : "Make a call to action."}
              </h2>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jizWj)}
              >
                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mlJvs
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__kpQuA)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9WKaV
                    )}
                  >
                    {"Sign up today"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__xAk92)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__gdUqT)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gblQ4)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___7Oo64)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__jJuHy)}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__fbQfT)}
                    displayHeight={"40px" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"40px" as const}
                    src={{
                      src: "/plasmic/startup_landing_page/images/logo1Svg2.svg",
                      fullWidth: 150,
                      fullHeight: 150,
                      aspectRatio: 1
                    }}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lF9Gm
                    )}
                  >
                    {"Company Name"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__g0UT)}
                  >
                    {true ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__diSek
                        )}
                        component={Link}
                        href={"#" as const}
                        platform={"nextjs"}
                      >
                        <Icon3Icon
                          className={classNames(projectcss.all, sty.svg__rywIc)}
                          role={"img"}
                        />
                      </p.PlasmicLink>
                    ) : null}

                    {true ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link___6Vg5
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__t0Q0V)}
                          role={"img"}
                        />
                      </p.PlasmicLink>
                    ) : null}

                    {true ? (
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__uOdit
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        <Icon28Icon
                          className={classNames(projectcss.all, sty.svg__pwWzM)}
                          role={"img"}
                        />
                      </p.PlasmicLink>
                    ) : null}
                  </p.Stack>
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zkmzd)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3___3BRaa
                  )}
                >
                  {"Product"}
                </h3>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__uhZoS
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__kec6P)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tfmoa
                    )}
                  >
                    {"Pricing"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__x0S6M)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___0CnM
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__lV2Qh)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__pIgAi
                    )}
                  >
                    {"Log in"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__jTkoQ)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mnrt4
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__eMCxk)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ot7VX
                    )}
                  >
                    {"Integrations"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__pEso1)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__sVjcJ
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__a7UQp)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rsEgf
                    )}
                  >
                    {"Insights"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__ovxeD)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__tcWs)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__h8Tx
                  )}
                >
                  {"Legal"}
                </h3>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___4AKhY
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__fe6Le)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sdB1D
                    )}
                  >
                    {"Documentation"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__h7ANg)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__qsTkN
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__rdKdL)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wwQvH
                    )}
                  >
                    {"FAQs"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__g3M87)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__dSugB
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__iRqFt)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sshqp
                    )}
                  >
                    {"Status"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__fNQvm)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4G15N)}
              >
                <h3
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3__bP7Hy
                  )}
                >
                  {"Company"}
                </h3>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__yDqb0
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__ivNbe)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gaHbt
                    )}
                  >
                    {"About"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__zPxds)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__gFv4
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__dpmgE)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__t47SM
                    )}
                  >
                    {"Contact us"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__xZ7Oi)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___2P92O
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__rZDl)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jrYqj
                    )}
                  >
                    {"Careers"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg___335IU)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__idjr7
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__ldGjs)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__mqtCr
                    )}
                  >
                    {"Media"}
                  </div>

                  {false ? (
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__gDbBr)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vkMc
              )}
            >
              <React.Fragment>
                <React.Fragment>
                  {
                    "© Company. All rights reserved. This site proudly built with "
                  }
                </React.Fragment>
                {
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      projectcss.plasmic_default__inline,
                      sty.link__mUWg4
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"Plasmic"}
                  </p.PlasmicLink>
                }
                <React.Fragment>{"."}</React.Fragment>
              </React.Fragment>
            </div>
          </div>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "headerSliderSection",
    "button",
    "h1",
    "art",
    "background2",
    "copy",
    "copy2",
    "art2",
    "copy3",
    "art3"
  ],
  headerSliderSection: ["headerSliderSection", "button", "h1"],
  button: ["button"],
  h1: ["h1"],
  art: ["art", "background2"],
  background2: ["background2"],
  copy: ["copy"],
  copy2: ["copy2"],
  art2: ["art2"],
  copy3: ["copy3"],
  art3: ["art3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  headerSliderSection: "div";
  button: "button";
  h1: "h1";
  art: "div";
  background2: "div";
  copy: "div";
  copy2: "div";
  art2: "div";
  copy3: "div";
  art3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    headerSliderSection: makeNodeComponent("headerSliderSection"),
    button: makeNodeComponent("button"),
    h1: makeNodeComponent("h1"),
    art: makeNodeComponent("art"),
    background2: makeNodeComponent("background2"),
    copy: makeNodeComponent("copy"),
    copy2: makeNodeComponent("copy2"),
    art2: makeNodeComponent("art2"),
    copy3: makeNodeComponent("copy3"),
    art3: makeNodeComponent("art3"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
